FORMAT: 1A
HOST: http://ehealth.edenlabllc.com/

# eHealth MIS Medical Events API

All the medical data, stored in eHealth, belongs to the patient and must be properly protected. eHealth provides several mechanisms to secure patient's data and limitate access.

1. Only authenticated user with appropriate scope can access medical data
List of scopes available for the specific user role can be recieved using [/roles endpoint](https://ehealthmisapi1.docs.apiary.io/#reference/public.-medical-service-provider-integration-layer/roles/list-roles) [wiki: Scopes data model](https://edenlab.atlassian.net/wiki/spaces/EH/pages/2004415/Scopes+model)
2. Access to Patient Medical Data is driven by Attribute-based access control(ABAC). Rules [https://github.com/edenlabllc/ehealth.abac.api/blob/develop/apps/rules/priv/features/medical_events.feature]
3. Patient is able to grant access to specific episode(s) for specific users. User with this approval can view episode details and its nested entities
4. Post methods are async

![Access policy](https://image.ibb.co/fOPoTV/Referrals-Medical-events-usage.png)

# Group Medical Events
Medical events API is a set of web services designed to provide methods of communication between eHealth Medical Data Storage and medical information systems (MIS).
Medical events API is based on the international framework for exchanging digital health records - FHIR( Release 3 (STU)). Most of  major resources, data types, data structures and their way of interpretation are inherited from FHIR. However, there are minor —Åhanges described in Apiary.
To find out more about business logic behind the API read [this](https://edenlab.atlassian.net/wiki/spaces/EH/pages/604241979/Medical+Events+API).
###Sequence diagram
In order to provide a consistency of submitted data the established flow should be followed:
![Contract request flow](https://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgU3VibWl0dGluZyBtZWRpY2FsIGRhdGEgcGFja2FnZQoKcGFydGljaXBhbnQgTUlTIGFzIG1zcAAKDWVIZWFsdGggYXMgZWgABgUAKQ1Eb2N1bWVudCBzdG9yYWdlIGFzAAMICgoKbXNwLT4AMAc6IDw8U2VhcmNoIGZvciBhIHBlcnNvbj4-CgBRBy0-bXNwOiA8PFJlc3BvbnNlIHdpdGgAIAdzIGlkcz4-Cm9wdABIDjw8Q3JlYXRlIGVwaXNvZGUARAwAgSoHIDoAHAdhc3luYyBqb2IAZQ4AaghkAGsGam9iIGlkADUTOiAAXQ4AgU4RR2V0ADkFYnkAMg8AgUwNAFwLZGV0YWlscz4-CmVuZACBSBRVcGQAdGgAXQ4AgQxQAIQFBgCDXAUAgygIbmNvdW50ZXIAhQYJABkKU2lnbgAJGACEQwwAhVsFADgSAIMwVACFWQc6IFNhdmUgc2lnbmVkIGNvbnRlbnQgdG8AhWwJAIQjElByb2Nlc3MAgS0ZAIN7OwCFehRsb3MAhSZnAF4MAIVATAoKCgoKCgoK&s=modern-blue)

## Encounter Data Package [/api/patients/{id}/encounter_package]

### Submit Encounter Package [POST]

Using this web service you can submit:

Object| Required| Part of Signed content
-------|---------|------
Visit| 0-1 | false
Encounter| 1-1 |true
Condition| 0-* |true
Observation| 0-* |true
Allergy intolerance| 0-* |true
Immunization| 0-* |true
Risk assessment|0-*| true
Device|0-*| true
Medication statement|0-*|true

To find out more about the process of encounter package creation read [Confluence Submit Encounter Data Package ](https://edenlab.atlassian.net/wiki/spaces/EH/pages/608272488/Submit+Encounter+Data+Package).



+ Request Package (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (object)
        + include `Submit_Encounter_Package`

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)



### Get async Job processing details [GET /api/jobs/{id}]
This resource should be used to get the processing status of the async job.
Read more about [job processing algorithms.](https://edenlab.atlassian.net/wiki/spaces/EH/pages/612041003/Medical+events+Technical+Documentation#MedicaleventsTechnicalDocumentation-AsyncjobprocessingSequencediagram)

+ Parameters
    + id: `NBXk9EyErUZv1RhXgyvgg` (string, required) - request identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer 342432fdsfdsgfdt24535422fgds

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 200 (number)
        + data (`Job`)

+ Response 303 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 303 (number)
        + data (`Job`)
            + status: `processed`
            + status_code: `200`
            + links (array, required, fixed-type)
                + (object)
                    + entity: `encounter` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/encounters/90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
                + (object)
                    + entity: `condition` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/conditions/df112200-64da-451b-bf77-8e7655bbd48f` (string, required)
                + (object)
                    + entity: `observation` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/observations/d118cc02-3b9b-4d1a-b728-eda4e3d58f25` (string, required)
                + (object)
                    + entity: `allergy_intolerance` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/allergy_intolerances/5f41c64a-6742-4d6d-9f3b-c6742b2ee0a1` (string, required)
                + (object)
                    + entity: `immunization` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/immunizations/12e5985d-2a79-452f-8bc4-ed3a02fdefc5` (string, required)
                + (object)
                    + entity: `risk_assessment` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/risk_assessments/22e5985d-2a79-452f-8bc4-ed3a02fdefc5` (string, required)
                + (object)
                    + entity: `device` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/devices/32e5985d-2a79-452f-8bc4-ed3a02fdefc5` (string, required)
                + (object)
                    + entity: `medication_statemet` (string, required)
                    + href: `{host}/api/patients/3da18c10-d2ca-469e-bde5-7413201cea2/medication_statemets/42e5985d-2a79-452f-8bc4-ed3a02fdefc5` (string, required)
+ Response 200 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 200 (number)
        + data (`Job_Error`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Object not found` (string)

### Dummy Encounter [POST]
This chapter describes different examples of Encounters that could be submitted as a signed content in Submit Visit web service.

+ Request Encounter with new Condition (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (Encounter_Request)
        
    
#### Dummy Condition [POST]
Here you can find additional examples of Conditions that could be submitted as a part of signed content.

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Condition_Request`)
    
    
#### Dummy Observation [POST]
Here you can find additional examples of Observations that could be submitted as a part of signed content.

+ Request 1 (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Observation_Request_1`)
    
    
+ Request 2 (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Observation_Request_2`)

        
        
    
#### Dummy Immunization [POST]
Here you can find additional examples of Immunizations that could be submitted as a part of signed content.

+ Request  (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Immunization_Request`) 
    
#### Dummy Allergy_Intolerance [POST]
Here you can find additional examples of Allergy_Intolerances that could be submitted as a part of signed content.

+ Request  (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Allergy_Intolerance_Request`)

#### Dummy Risk_Assessment [POST]
Here you can find additional examples of Risk_Assessment that could be submitted as a part of signed content.

+ Request  (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Risk_Assessment_Request`)

#### Dummy Device [POST]
Here you can find additional examples of Device that could be submitted as a part of signed content.

+ Request  (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Device_Request`)


#### Dummy Medication Stetement [POST]
Here you can find additional examples of Medication_Statement that could be submitted as a part of signed content.

+ Request  (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Medication_Statement_Request`)

### Cancel Encounter Package [PATCH]
Read more about [business logic and validations.](https://edenlab.atlassian.net/wiki/spaces/EH/pages/618726129/Cancel+Encounter+Data+Package+WS)
+ Request Package (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (object)
        + signed_data: `ew0KICAicGVyaW9kIjogew0KIC...` (string, required)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)


### Cancel Encounter Package Dummy[PATCH]
+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (`Cancel_Encounter`) 

+ Response 200 (application/json)


## Episode of Care [/api/patients/{id}/episodes]
Episode of care is a resource that contains general information about a patient`s medical case, such as care manager and diagnoses history.
### Create Episode  [POST]
Read more about [business logic and validations.](https://edenlab.atlassian.net/wiki/spaces/EH/pages/620134482/Create+Episode)
+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (object)
        + include `Episode_Of_Care_Request`

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)

### Get Episode by id[GET /api/patients/{patient_id}/episodes/{episode_id}]
Use period_from period_to to find episodes that were active in a certain period of time

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Episode identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data(`Episode_Of_Care_Response`)
    

### Get Episodes by search params [GET /api/patients/{patient_id}/episodes{?period_from,period_to,page,page_size}]


**Scopes required:** `TBD`

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `page`: 2 (number, optional) - Page number
    + `page_size`: 50 (number,optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `period_from`: `2017-01-01` (string, optional)
    + `period_to`: `2018-01-01` (string, optional)
    + `service_request_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, optional)
    + `code`: `R80` (string, optional)

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data(array[`Episode_Of_Care_Response`])
        

### Update Episode [PATCH /api/patients/{patient_id}/episodes/{episode_id}]
Read more about [business logic and validations.](https://edenlab.atlassian.net/wiki/spaces/EH/pages/623837304/Update+Episode)
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier

+ Request Package (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

    + Attributes (object)
        + include `Update_Episode`

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)

### Close Episode [PATCH /api/patients/{patient_id}/episodes/{episode_id}/actions/close]
Read more about [business logic and validations.](https://edenlab.atlassian.net/wiki/spaces/EH/pages/624951347/Close+Episode)
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier

+ Request  (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
    + Attributes (object)
        + include `Close_Episode`


+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)

### Cancel Episode [PATCH /api/patients/{patient_id}/episodes/{episode_id}/actions/cancel]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier

+ Request  (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

    + Attributes (object)
        + include `Cancel_Episode`


+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Patient not found` (string)

### Get encounters in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/encounters{?date_from,date_to,page,page_size}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `date_from`:`1990-01-01`(string, optional)
    + `date_to`: `2000-01-01`(string, optional)
    + `page`: `2` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Encounter_Response`], fixed-type)

### Get encounter details in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/encounters/{encounter_id}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `encounter_id`: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Encounter identifier

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Encounter_Response`)

### Get conditions in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/conditions{?code,onset_date_from,onset_date_to,page,page_size}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `code`: `A20` (string, optional)
    + `onset_date_from`:`1990-01-01` (string, optional)
    + `onset_date_to`: `2000-01-01` (string, optional)
    + `page`: `2` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Condition_Response`], fixed-type)

### Get conditions details in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/conditions/{condition_id}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `condition_id`: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Condition identifier

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Condition_Response`)

### Get observations in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/observations{?code,issued_from,issued_to,page,page_size}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `code`: `10569-2` (string, optional)
    + `issued_from`:`1990-01-01` (string, optional)
    + `issued_to`: `2000-01-01` (string, optional)
    + `page`: `2` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Observation_Response`], fixed-type)

### Get observation details in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/observations/{observation_id}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `observation_id`: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Observation identifier

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Observation_Response`)

### Get allergy intolerances in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/allergy_intolerances{?code,onset_date_time_from,onset_date_time_to,page,page_size}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `code`: `227493005` (string, optional)
    + `onset_date_time_from`:`1990-01-01` (string, optional) 
    + `onset_date_time_to`: `2000-01-01` (string, optional)
    + `page`: `2` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Allergy_Intolerance_Response`], fixed-type)

### Get allergy intolerance details in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/allergy_intolerances/{allergy_intolerance_id}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `allergy_intolerance_id`: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Allergy intolerance identifier

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Allergy_Intolerance_Response`)

### Get immunizations in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/immunizations{?code,date_from,date_to,page,page_size}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `vaccine_code`: `wex-10` (string, optional)
    + `date_from`: `1990-01-01` (string, optional) 
    + `date_to`: `2000-01-01` (string, optional)
    + `page`: `2` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Immunization_Response`], fixed-type)

### Get immunization details in episode context [GET /api/patients/{patient_id}/episodes/{episode_id}/immunizations/{immunization_id}]
+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `episode_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Episode identifier
    + `immunization_id`: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Immunization identifier

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Immunization_Response`)

## Encounter [/api/patient/{id}/encounters]

### Get Encounter by  id[GET /api/patient/{patient_id}/encounters/{encounter_id}]

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `encounter_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Encounter identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Encounter_Response`)
    

### Get Encounters by search params[GET /api/patient/{patient_id}/encounters{?date_from,date_to,episode_id,page,page_size}]
+ Parameters
    + `page`: `2` (number, optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `date_from`:`1990-01-01`(string, optional)
    + `date_to`: `2000-01-01`(string, optional)
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Encounter_Response`])

## Conditions [/api/patients/{patient_id}/conditions]

### Get Condition by id [GET /api/patients/{patient_id}/conditions/{condition_id}]

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `condition_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Condition identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Condition_Response`)
    

### Get Conditions by search params [GET /api/patients/{patient_id}/conditions{?encounter_id,episode_id,onset_date_from,onset_date_to,code,page,page_size}]
+ Parameters
    + `page`: `1` (number,optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `A20` (string, optional)
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional)
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional)
    + `onset_date_from`:`1990-01-01` (string, optional)
    + `onset_date_to`: `2000-01-01` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Condition_Response`])
    

## Observation [/api/patients/{patient_id}/observation/{id}]

### Get Observation by id[GET /api/patients/{patient_id}/observations/{observation_id}]

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `observation_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Observation identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Observation_Response`)
    

### Get Observations by searh params[GET /api/patients/{patient_id}/observations{?encounter_id,episode_id,code,issued_from,issued_to,page,page_size}]
+ Parameters
    + `page`: `1` (number, optional) - Page number    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `10569-2` (string, optional)
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional)
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional)
    + `issued_from`:`1990-01-01` (string, optional)
    + `issued_to`: `2000-01-01` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Observation_Response`])



## Allergy Intolerance [/api/patients/{patient_id}/allergy_intolerances/{id}]

### Get Allergy Intolerance by id[GET /api/patients/{patient_id}/allergy_intolerances/{allergy_intolerance_id}]

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `allergy_intolerance_id`: `a10aeafb-0df2-4091-bc83-f07e92a100ae` (string, required) - Allergy intolerance identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Allergy_Intolerance_Response`)

### Get Allergy Intolerances by search params[GET /api/patients/{patient_id}/allergy_intolerances{?encounter_id,episode_id,code,onset_date_time_from,onset_date_time_to,page,page_size}]

+ Parameters
    + `page`: `2` (number, optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `227493005` (string, optional) 
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional) 
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional) 
    + `onset_date_time_from`:`1990-01-01` (string, optional)
    + `onset_date_time_to`: `2000-01-01` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Allergy_Intolerance_Response`])



## Immunization [/api/patients/{patient_id}/immunizations]

### Get Immunization by id [GET /api/patients/{patient_id}/immunizations/{immunization_id}]

+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + immunization_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique immunization identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Immunization_Response`)

### Get Immunizations by search params [GET /api/patients/{patient_id}/immunizations{?vaccine_code,date_from,date_to,page,page_size,code,encounter_id,episode_id}]

+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `vaccine_code`: `wex-10` (string, optional) 
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional) 
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional) 
    + `date_from`: `1990-01-01` (string, optional) 
    + `date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Immunization_Response`], fixed-type)

## Risk Assessment [/api/patients/{patient_id}/risk_assessments]

### Get Risk Assessment by id [GET /api/patients/{patient_id}/risk_assessments/{risk_assessment_id}]

+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + risk_assessment_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique immunization identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Risk_Assessment_Response`)

### Get Risk Assessments by search params [GET /api/patients/{patient_id}/risk_assessments{?code,asserted_date_from,asserted_date_to,page,page_size,encounter_id,episode_id}]

+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `R80` (string, optional) 
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional) 
    + `episode_id`: `f48d1b6c-a021-4d6a-a5a4-aee93e152ecc` (string, optional) 
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Risk_Assessment_Response`], fixed-type)


## Device [/api/patients/{patient_id}/devices]

### Get Device by id [GET /api/patients/{patient_id}/devices/{device_id}]

+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + device_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique device identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Device_Response`)

### Get Devices by search params [GET /api/patients/{patient_id}/devices{?asserted_date_from,asserted_date_to,page,page_size,type,encounter_id,episode_id}]

+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `type`: `spine_board` (string, optional) 
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional) 
    + `episode_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional)
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Device_Response`], fixed-type)


## Medication Statement [/api/patients/{patient_id}/medication_statements]
### Get Medication Statement by id  [GET /api/patients/{patient_id}/medication_statements/{medication_statement_id}]
+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + medication_statement_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique device identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Medication_Statement_Response`)

### Get Medication Statement by search params [GET /api/patients/{patient_id}/medication_statements/{?asserted_date_from,asserted_date_to,page,page_size,medication_code,encounter_id,episode_id}]
+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `medication_code`: `spine_board` (string, optional) 
    + `encounter_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional) 
    + `episode_id`: `09dc3ed7-2169-45d8-8fa3-d918c6839bf9` (string, optional)
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Medication_Statement_Response`], fixed-type)

## Patient Summary [/api/patients/{patient_id}/summary]

----
**Patient Summary** - is a set of services that provide access to the patient's basic Medical Data

Basic Medical Data includes the following entities:

Entity              | Access level 
--------------------|-------------
Episode             | Short list of episodes
Allergy Intolerance | All *Allergy Intolerances* are available for Patient Summary
Immunizations       | All *Immunizations* are available for Patient Summary
Conditions          | Only specific *Conditions* are available for Patient Summary. Restrictions is based on *condition.code*
Observations        | Only specific *Observations* are available for Patient Summary. Restrictions is based on *observation.code*
Diagnoses           | Only current diagnoses related to active *Episodes* that refer to specific *Conditions* are available for Patient Summary. Restrictions is based on *condition.code*
Risk Assessment     | All patient's risk assessments
Device              | All patient`s devices
Medication Statment | All patient`s medication statments


### Get Short Episodes by search params [GET /api/patients/{patient_id}/summary/episodes{?period_from,period_to,page,page_size}]

This web service returns brief information in order not to disclose confidential and sensitive data. Access to full episode data is restricted by patient's approval.
If you have an approval - you can obtain episode details and nested entities through `/episode/:id/*` web services

**Scopes required:** `TBD`

+ Parameters
    + `patient_id`: `70a9e15b-b71b-4caf-8f2e-ff247e8a5677` (string, required) - Patient identifier
    + `page`: 2 (number, optional) - Page number
    + `page_size`: 50 (number,optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `period_from`: `2017-01-01` (string, optional)
    + `period_to`: `2018-01-01` (string, optional)

+ Request (application/json)
    + Headers
    
            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data(array[`Episode_Of_Care_Short`])
        

### Get Immunizations [GET /api/patients/{patient_id}/summary/immunizations{?page,page_size,code,date_from,date_to}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `patient_id`: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `vaccine_code`: `wex-10` (string, optional)
    + `date_from`: `1990-01-01` (string, optional) 
    + `date_to`: `2000-01-01` (string, optional)

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Immunization_Response`], fixed-type)

### Get Immunization by id [GET /api/patients/{patient_id}/summary/immunizations/{id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + patient_id: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique immunization identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Immunization_Response`, fixed-type)

### Get Allergy Intolerances [GET /api/patients/{patient_id}/summary/allergy_intolerances{?page,page_size,code,onset_date_time_from,onset_date_time_to}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `patient_id`: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + `page`: `2` (number, optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `227493005` (string, optional) 
    + `onset_date_time_from`: `1990-01-01` (string, optional) 
    + `onset_date_time_to`: `2000-01-01` (string, optional) 

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Allergy_Intolerance_Response`], fixed-type)

### Get Allergy Intolerance by id [GET /api/patients/{patient_id}/summary/allergy_intolerances/{id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + patient_id: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique allergy intolerance identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Allergy_Intolerance_Response`, fixed-type)

### Get Observations [GET /api/patients/{patient_id}/summary/observations{?page,page_size,code,issued_from,issued_to}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `patient_id`: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + `page`: `1` (number, optional) - Page number
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `10569-2` (string, optional)
    + `issued_from`: `1990-01-01` (string, optional)
    + `issued_to`: `2000-01-01` (string, optional)

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Observation_Response`], fixed-type)

### Get Observation by id [GET /api/patients/{patient_id}/summary/observations/{id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + patient_id: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique observation identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Observation_Response`, fixed-type)

### Get Conditions [GET /api/patients/{patient_id}/summary/conditions{?page,page_size,code,onset_date_from,onset_date_to}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `patient_id`: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + `page`: `1` (number,optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `A20` (string, optional)
    + `onset_date_from`: `1990-01-01` (string, optional)
    + `onset_date_to`: `2000-01-01` (string, optional)

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Condition_Response`], fixed-type)

### Get Condition by id [GET /api/patients/{patient_id}/summary/conditions/{id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + patient_id: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique condition identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Condition_Response`, fixed-type)

### Get active Diagnoses [GET /api/patients/{patient_id}/summary/diagnoses]

This endpoint returns current diagnoses related only to active episodes. In order to get specific condition details, use [Get Condition by ID](https://ehealthmedicaleventsapi.docs.apiary.io/#reference/medical-events/patient-summary/get-condition-by-id)

**Scopes required:** `patient_summary:read`

+ Parameters
    + `patient_id`: `7a489bbd-d8e2-48d9-92fd-fcf0102f7b08` (string, required) - Unique patient identifier
    + `page`: `1` (number,optional) - Page number.    
    + `page_size`: `50` (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `A20` (string, optional)

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array, required, fixed-type)
            + (Diagnosis_Referrence_Condition)
            + (Diagnosis_Referrence_Condition_2)




### Get Risk Assessment by id [GET /api/patients/{patient_id}/summary/risk_assessments/{risk_assessment_id}]

+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + risk_assessment_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique immunization identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Risk_Assessment_Response`)

### Get Risk Assessments by search params [GET /api/patients/{patient_id}/summary/risk_assessments{?code,asserted_date_from,asserted_date_to,page,page_size,encounter_id,episode_id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `code`: `R80` (string, optional) 
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Risk_Assessment_Response`], fixed-type)

### Get Device by id [GET /api/patients/{patient_id}/summary/devices/{device_id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + device_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique device identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Device_Response`)

### Get Devices by search params [GET /api/patients/{patient_id}/summary/devices{?asserted_date_from,asserted_date_to,page,page_size,type,encounter_id,episode_id}]

**Scopes required:** `patient_summary:read`

+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `type`: `spine_board` (string, optional) 
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 

### Get Medication Statement by id  [GET /api/patients/{patient_id}/summary/medication_statements/{medication_statement_id}]
**Scopes required:** `patient_summary:read`
+ Parameters
    + patient_id: `e549c257-232e-4dab-9f1e-b2322cac3968` (string, required) - Unique patient identifier
    + medication_statement_id: `340b86fd-23f3-4a33-94c5-8ec19d116c33` (string, required) - Unique device identifier

+ Request (application/json)
    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_OK`)
        + data (`Medication_Statement_Response`)

### Get Medication Statement by search params [GET /api/patients/{patient_id}/summary/medication_statements/{?asserted_date_from,asserted_date_to,page,page_size,medication_code,encounter_id,episode_id}]
**Scopes required:** `patient_summary:read`
+ Parameters
    + `page`: 2 (number, optional) - Page number.    
    + `page_size`: 50 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
    + `medication_code`: `spine_board` (string, optional) 
    + `asserted_date_from`: `1990-01-01` (string, optional) 
    + `asserted_date_to`: `2000-01-01` (string, optional) 
    

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM

+ Response 200 (application/json)
    + Attributes (`Response_Collection`)
        + data (array[`Medication_Statement_Response`], fixed-type)

# Group Service Requests

###Sequence diagram

## Manage Service Requests in patient context [/api/patients/{patient_id}/service_requests]

### Create Service Request [POST]

This method must be used to register new Service Request in the eHealth. 
Method receives signed message (pkcs7) that consists of signed content, digital signature and signer public key. All signature fields will be validated (including signer certificate authority).
Service will store signed copy of Service Request in Media Content Storage if all checks is passed. 

Signed content consists of JSON object with Service Request data.

**Scopes required:** `service_request:write`

+ Parameters
    + patient_id: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Unique patient identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V
    
    + Attributes (object)
        + `signed_data`:`ew0KICAicGVyaW9kIjogew0KIC...` (string, required, fixed-type)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Dummy Service Request [POST /dummy/patients/{id}/service_requests]

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

    + Attributes (Service_Request_Create)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Get Service Requests list [GET /api/patients/{patient_id}/episodes/{episode_id}/service_requests{?status}]

This method returns all service requests related to specified episode of care.

**Scopes required:** `service_request:read`

+ Parameters
    + patient_id: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Unique patient identifier
    + episode_id: `ef30f210-5328-4f48-bfe6-c7150d4737a6` (string, required) - Unique episode identifier
    + status: active (string, optional) - The status of the service request. Default: active

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Service_Request_Show`])

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Episode or patient not found` (string)

### Get Service Request details [GET /api/patients/{patient_id}/episodes/{episode_id}/service_requests/{service_request_id}]

**Scopes required:** `service_request:read`

+ Parameters
    + patient_id: `7075e0e2-6b57-47fd-aff7-324806efa7e5` (string, required) - Unique patient identifier
    + episode_id: `ef30f210-5328-4f48-bfe6-c7150d4737a6` (string, required) - Unique episode identifier
    + service_request_id: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - Unique service request identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Service_Request_Show`)

+ Response 404 (application/json)
    + Attributes (Response_Error)
        + meta (Response__Meta)
            + code: 404 (number)
        + error (Response__Error)
            + type: NOT_FOUND (string)
            + message: `Service request not found` (string)

### Cancel Service Request [PATCH /api/patients/{id}/service_requests/{id}/actions/cancel]

This method must be used to cancel existing Service Request. Method receives signed message (pkcs7) that consists of signed content, digital signature and signer public key. All signature fields will be validated (including signer certificate authority)

**Important**
1. Signed content of service request must be equal to service request stored in DB. See Get Service Request details
2. status_reason and explanatory_letter (optional) must be added to signed content

Please see [Service request (Referral) state model](https://edenlab.atlassian.net/wiki/x/aoDzJg) and Dummy Cancel Service Request for more details


**Scopes required:** `service_request:write`

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V
    
    + Attributes (object)
        + `signed_data`:`ew0KICAicGVyaW9kIjogew0KIC...` (string, required, fixed-type)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Dummy Cancel Service Request [PATCH /api/patients/{id}/service_requests/{id}/actions/cancel/dummy]
+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V
    
    + Attributes (Service_Request_Base)
        + `status_reason` (Codeable_Concept, required)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/service_request_cancel_reasons` (string)
                    + code: `default` (string)
        + `explanatory_letter`: `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–µ —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ ` (string, optional)
        

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Recall Service Request [PATCH /api/patients/{id}/service_requests/{id}/actions/recall]

This method must be used to recall existing Service Request. Method receives signed message (pkcs7) that consists of signed content, digital signature and signer public key. All signature fields will be validated (including signer certificate authority)

**Important**
1. Signed content of service request must be equal to service request stored in DB. See Get Service Request details
2. status_reason and explanatory_letter (optional) must be added to signed content

Please see [Service request (Referral) state model](https://edenlab.atlassian.net/wiki/x/aoDzJg) and Dummy Recall Service Request for more details

**Scopes required:** `service_request:write`

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V
    
    + Attributes (object)
        + `signed_data`:`ew0KICAicGVyaW9kIjogew0KIC...` (string, required, fixed-type)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Dummy Recall Service Request [PATCH /api/patients/{id}/service_requests/{id}/actions/recall/dummy]
+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V
    
    + Attributes (Service_Request_Base)
        + `status_reason` (Codeable_Concept, required)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/service_request_rceall_reasons` (string)
                    + code: `default` (string)
        + `explanatory_letter`: `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–µ —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ ` (string, optional)
        

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

## Manage Service Requests [/api/service_requests]

### Search for a service requests [GET /api/service_requests{?requisition,status}]

This service must be used to discover service requests by requisition number. If nothing found by requisition number - it will return empty list

**Scopes required:** `service_request:read`

+ Parameters
    + requisition: `AX654-654T` (string, required) - A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier
    + status: active (string, optional) - The status of the service request. Default: active

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Service_Request_Base`])

### Use Service Request [PATCH /api/service_requests/{service_request_id}/actions/use]

**Scopes required:** `service_request:use`

+ Parameters
    + service_request_id: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - Unique service request identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

    + Attributes (Use_Service_Request_Request)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Release Service Request [PATCH /api/service_requests/{service_request_id}/actions/release]

**Scopes required:** `service_request:use`

+ Parameters
    + service_request_id: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - Unique service request identifier

+ Request (application/json)

    + Headers

            Authorization: Bearer mF_9.B5f-4.1JqM
            api-key: aFBLVTZ6Z2dON1V

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

## Group Approvals
### Create approval [POST /api/patients/{patient_id}/approvals]
Method to create approval: time-limited access to user's resources.
It can be processed in both sync and async methods depends on Server decision.
Depends on processing method Server might answer with:
http code| processing method | Client recommendations
--|--|--
201 | sync | use payload from response
202 | async: **default** method | use [Get job details](https://ehealthmedicaleventsapi.docs.apiary.io/#reference/medical-events/encounter-data-package/get-async-job-processing-details) to get processing result. Response payload will be returned in the job details



+ Parameters
    + `patient_id`: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - mpi_id

+ Request (application/json)

    + Headers

            Authorization: Bearer d368a4b0-4a0e-457a-b267-32359fa6288f
    + Attributes (object)
        + include `Approval_Request`

+ Response 201 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data(`Approval_Response`)


+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

### Verify approval [PATCH /api/patients/{patiend_id}/approvals/{id}]

+ Parameters
    + `patiend_id`: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - mpi_id
    + `id`: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - approval_id
    
+ Request (application/json)

    + Headers

            Authorization: Bearer d368a4b0-4a0e-457a-b267-32359fa6288f

    + Attributes (object)
        + `code`: 3782 (number)

+ Response 200 (application/json)

### Resend SMS on approval [PATCH /api/patients/{patiend_id}/approvals/{id}/actions/resend]
It can be processed in both sync and async methods depends on Server decision.
Depends on processing method Server might answer with:
http code| processing method | Client recommendations
--|--|--
201 | sync | use payload from response
202 | async: **default** method | use [Get job details](#get-async-Job-processing-details) to get processing result. Response payload will be returned in the job details

+ Parameters
    + `patiend_id`: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - mpi_id
    + `id`: `aff00bf6-68bf-4b49-b66d-f031d48922b3` (string, required) - approval_id
    
+ Request (application/json)

    + Headers

            Authorization: Bearer d368a4b0-4a0e-457a-b267-32359fa6288f

+ Response 200 (application/json)

+ Response 202 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 202 (number)
        + data (`Job`)

# Data Structures

## Responses
### `Response_Collection`
+ meta (Response__Meta, fixed-type)
+ data (array[], fixed-type)
+ paging (`Response__Pagination`, fixed-type)

### `Response_Collection_OK`
+ meta (Response__Meta, fixed-type)
+ data (array[], fixed-type)

### `Response_OK`
+ meta (Response__Meta, fixed-type)
+ data (object, fixed-type)

### `Response__Process_OK`
+ meta (Response__Meta, fixed-type)
+ data (object, fixed-type)
    + affordances (array[Affordance], required) - List of available affordances and their URLs

### `Response_verification_by_phone`
+ `phone_number`: `+380508887700` (string, required)

### `Response_Error`
+ meta (Response__Meta, fixed-type)
    + code: 400 (number)
+ error (Response__Error, fixed-type)

### `Response__Meta`
+ code: 200 (number) - HTTP response code.
+ url: http://example.com/resource (string) - URL to requested resource.
+ type (enum) - Type of data that is located in `data` attribute.
    - object (string) - `data` attribute is a JSON object.
    - list (string) - `data` attribute is a list.
+ `request_id`: `req-adasdoijasdojsda` (string) - [Request ID](http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/request-id). Send it with `X-Request-ID` header.

### `Response__Error`
+ type: type_atom (string) - Atom that represents error type.
+ message: Error description (string) - Human-readable error message. This is for developers, not end-users.

### `Response__Error_DuplicateEntity`
+ type: `object_already_exists` (string) - Atom that represents error type.
+ message: This API already exists (string) - Human-readable error message. This is for developers, not end-users.

### `Response__Error_ValidationFailed`
+ type: validation_failed (string) - type of an error.
+ message: Validation failed. You can find validators description at our API Manifest: http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/errors. (string)
+ invalid (array)
    + `entry_type`: `json_data_proprty` (string) - Type of error.
    + entry: $.cvv (string) - JSON Path to an invalid property.
    + rules (array)
        + rule: required (string) - String constant that represents validation rule type. List of all types can be found in [API Manifest](http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/errors).
        + params (array) - Validation Parameters.

### `Response__Pagination`
+ page: 2 (number) - Page number.
+ page_size: 50 (number) - A limit on the number of objects to be returned, between 1 and 100. Default: 50
+ total_entries: 1000 (number) - Total number of objects in collection.
+ total_pages: 20 (number) - Total number of pages.

### `Affordance`
+ action (string, required) - Affordance action.
+ url (string, required)

### `Ext_Reference`
+ reference (Reference, optional)
+ text (string, optional)

### `Reference`
+ identifier (Identifier)


### `Identifier`
+ `type`(Codeable_Concept, required) - Description of identifier
+ `value` : `9183a36b-4d45-4244-9339-63d81cd08d9c` (string, required)- The value that is unique

### `Codeable_Concept`
+ `coding` (array, required, fixed-type)
    + (object)
        + include `Coding`
+ text (string, optional)

### `Coding`
+ system : `eHealth/resources` (string, required)
+ code : `patient` (string, required) - Symbol in syntax defined by the system


### `Period`
+ start : `2018-08-02T10:45:16.000Z`(string, required) - C? Starting time with inclusive boundary
+ end : `2018-08-02T11:00:00.000Z`(string, optional) - C? End time with inclusive boundary, if not ongoing

### `Quantity`
+ value : `13,5` (number, required)
+ comparator : `>` (string, optional)
+ unit : `mg` (string, optional) - for future use
+ system : `eHealth/units` (string, required)
+ code: `mg` (string, required)
        

### `Range`
+ low (Quantity, required)
+ high (Quantity, required)

## Episode Of Care

### `Episode_Of_Care_Base`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ type  (Coding, required)
    + system : `eHealth/episode_types` (string)
    + code: `primary_care` (string) - `dictionary eHealth/episode_types`
+ `status`: `active` (string, required)- `dictionary - eHealth/episode_statuses`
+ name: `–î—ñ–∞–±–µ—Ç 2018` (string, required)
                    
+ `patient` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    
+ diagnoses_history (array, optional, fixed-type)
    + (object)
        + date: `2018-08-02T10:45:16.000Z` (string, required)
        + evidence (Reference, required, fixed-type)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `encounter` (string)
                            
            
        + diagnoses (array, required, fixed-type)
            + (Diagnosis_Referrence_Condition)
            + (Diagnosis_Referrence_Condition_2)
+ managing_organization (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
                    
            
+ period (Period, required)
    - end (string, optional)
+ care_manager (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)


### `Episode_Of_Care_Request`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ type  (Coding, required)
    + system : `eHealth/episode_types` (string)
    + code: `primary_care` (string) - `dictionary eHealth/episode_types`
+ `status`: `active`  (string, required) - `dictionary - eHealth/episode_statuses`
+ name: `–î—ñ–∞–±–µ—Ç 2018` (string, required)
            
+ managing_organization (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
                    
            
+ period (Period, required)
    - end (string, optional)
+ care_manager (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ referral_requests (array, fixed-type, optional)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `service_request` (string)

### `Episode_Of_Care_Response`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ type  (Coding, required)
    + system : `eHealth/episode_types` (string)
    + code: `primary_care` (string) - `dictionary eHealth/episode_types`
+ `status`: `active`  (string, required) - `dictionary - eHealth/episode_statuses`
+ name: `–î—ñ–∞–±–µ—Ç 2018` (string, required)
+  `status_history`  (array, optional, fixed-type)
    +(object)
        + status: `closed` (string, required)
        + `status_reason` (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/episode_closing_reasons` (string)
                    + code: `cured` (string)
        + `inserted_at`: `2018-08-02T10:45:16.000Z` (string, required)
+ `current_diagnoses` (array, optional, fixed-type)
    + (Diagnosis)
+ `diagnoses_history` (array, optional, fixed-type)
    + (object)
        + date: `2018-08-02T10:45:16.000Z` (string, required)
        + evidence (Reference, required, fixed-type)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `encounter` (string)
                            
            
        + diagnoses (array, required, fixed-type)
            + (Diagnosis_Referrence_Condition)
            + (Diagnosis_Referrence_Condition_2)
+ `status_history` (array, required, fixed_type)
    + (object)
        + status: `active` (string, required)
        + status reason (Codeable_Concept, required)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/episode_closing_reasons` (string)
                    + code: `cured` (string) \\ wrong_patient, misspelling
        + `inserted_at`: `2018-08-02T10:45:16.000Z` (string, required)            
+ managing_organization (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
                    
    + display: –õ–∏–º–∏—á –ú–µ–¥—ñ–∫–∞–ª (string, required) - This field is filled on creating and never updated after
            
+ period (Period, required)
    - end (string, optional)
+ care_manager (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)

+ `closing_summary`: `–ù–æ—Å–æ–≤—ñ —à–ª—è—Ö–∏ –≤—ñ–ª—å–Ω—ñ, –≥–æ—Ä–ª–æ —Ä–æ–∂–µ–≤–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º—ñ` (string, optional)    
+ `status_reason` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/episode_closing_reasons` (string)
            + code: `cured` (string) \\ wrong_patient, misspelling
            
+ `explanatory_letter`: `–ï–ø—ñ–∑–æ–¥ –±—É–≤ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∏–π —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ ` (string, optional)    


### `Update_Episode`
+ name: `–Ü–Ω—Å—É–ª—ñ–Ω–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∏–π –¥—ñ–∞–±–µ—Ç` (string, optional)

+ care_manager (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)

                    
### `Cancel_Episode`

+ `explanatory_letter`: `–ï–ø—ñ–∑–æ–¥ –±—É–≤ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∏–π —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ ` (string, optional)    
+ `cancellation_reason` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/cancellation_reasons` (string)
            + code: `misspelling` (string) \\ wrong_patient, misspelling
    - text (string)

### `Close_Episode`
+ `period` (object, required)
    + `end`: `2018-09-10` (string, required)
+ `closing_summary`: `–ù–æ—Å–æ–≤—ñ —à–ª—è—Ö–∏ –≤—ñ–ª—å–Ω—ñ, –≥–æ—Ä–ª–æ —Ä–æ–∂–µ–≤–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º—ñ` (string, optional)    
+ `closing_reason` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/episode_closing_reasons` (string)
            + code: `cured` (string) \\ wrong_patient, misspelling
    - text (string)

### `Episode_Of_Care_Short`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ name: `–î—ñ–∞–±–µ—Ç 2018` (string, required)
+ `status`: `active` (string, required)
+ period (Period, required)
    - end (string, optional)
    
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)

##Visit

### `Visit_Body`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ period (Period, required)
    + end  : `2018-08-02T10:45:16.000Z` (string, required)

### `Submit_Encounter_Package`

+ `visit` (object, optional, fixed-type)
    + include `Visit_Body`
+ `signed_data` : 'ew0KICAicGVyaW9kIjogew0KIC...' (string, required, fixed-type)




## Diagnosis

### `Diagnosis_Request`
+ `condition` (Reference, required) 
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `condition` (string)
+ `role` (Codeable_Concept, required) - Role that this diagnosis has within the episode of care
    + coding (array, fixed-type)
        + (Coding)
            + `system`: `eHealth/diagnosis_roles`
            + `code`: `CC`
            
    
+ rank: `1` (number, optional) - Ranking of the diagnosis. Max value = 10 (for each role type)

### `Diagnosis_Referrence_Condition_2`

+ `condition` (Reference, required) 
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `condition` (string)

+ `code` (Codeable_Concept, required) 
    + coding (array, fixed-type)
        + (Coding)
            + `system`: `eHealth/ICPC2/conditions`,
            + `code`: `A20` - `dictionary eHealth/ICPC2/condition_codes or eHealth/ICD10/condition_codes`                    

            
+ `role` (Codeable_Concept, required) - Role that this diagnosis has within the episode of care
    + coding (array, fixed-type)
        + (Coding)
            + `system`: `eHealth/diagnosis_roles`
            + `code`: `CC`
        
+ rank: `1` (number, optional) - Ranking of the diagnosis (for each role type)

### `Diagnosis_Referrence_Condition`

+ `condition` (Reference, required) 
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `condition` (string)
                    
+ `code` (Codeable_Concept, required) 
    + coding (array, fixed-type)
        + (Coding)
            + `system`: `eHealth/ICPC2/conditions`,
            + `code`: `A20` - `dictionary eHealth/ICPC2/condition_codes or eHealth/ICD10/condition_codes`
            
+ `role` (Codeable_Concept, required) - Role that this diagnosis has within the episode of care
    + coding (array, fixed-type)
        + (Coding)
            + `system`: `eHealth/diagnosis_roles`
            + `code`: `CC`
            
+ rank: `1` (number, optional) - Ranking of the diagnosis (for each role type)

## Encouner
### `Encounter_Base` (object)
+ id: `465fb6fe-2dea-4b8a-9ef7-58379d1eaab0` (string, required)
+ `status`: `finised`  (string, required) - `dictionary eHealth/encounter_statuses`                
+ `date`: `2018-08-02T10:45:16.000Z` (string, required)              
+ `visit` (Reference, required, fixed-type)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `visit` (string)
                        
+ `episode` (Reference, required, fixed-type)   
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `episode` (string)

+ class  (Coding, required)
    + system : `eHealth/encounter_classes` (string)
    + code: `inpatient` (string) - `dictionary eHealth/encounter_classes`
    
    
+ type (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/encounter_types` (string) 
            + code: `11429006` (string)- `dictionary eHealth/encounter_types`
            

                    
+ performer (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: employee (string)
                    
+ reasons (array,required)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
            + system: `eHealth/ICPC2/reasons` (string) 
            + code: `A02` (string) - `dictionary eHealth/ICPC2/reasons`
            
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/ICPC2/reasons` (string)
                + code: `D09` (string)-  `dictionary eHealth/ICPC2/reasons`
                
        
+ diagnoses (array, required, fixed-type)
    + (`Diagnosis_Request`)
        
        
+ actions (array, required, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
            + system: `eHealth/ICPC2/actions` (string)
            + code: `T47` (string)- `dictionary eHealth/ICPC2/actions`
            
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
            + system: `eHealth/ICPC2/actions` (string)
            + code: `T50` (string)- `dictionary eHealth/ICPC2/actions`
            
+ division (Reference, optional, fixed-type)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `division` (string)
                    
+ prescriptions: '–î—ñ—î—Ç–∞ ‚Ññ1, –û–º–µ–ø—Ä–∞–∑–æ–ª—É 40 –º–≥ 1 —Ä–∞–∑ –Ω–∞ –¥–æ–±—É + –∞–º–æ–∫—Å–∏—Ü–∏–ª—ñ–Ω—É 500 –º–≥ + –º–µ—Ç—Ä–æ–Ω—ñ–¥–∞–∑–æ–ª—É 400 –º–≥ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ 500 –º–≥ –∞–±–æ —Ç–∏–Ω—ñ–¥–∞–∑–æ–ª—É 500 –º–≥ 3 —Ä–∞–∑–∏ –Ω–∞ –¥–æ–±—É –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ç–∏–∂–Ω—è' (string, optional)

### `Encounter_Request` 
+ encounter (`Encounter_Base`, required, fixed-type)
+ conditions (array, optional, fixed-type)
    + (`Condition_Request`)
    + (`Condition_Request_2`)
+ observations (array, optional, fixed-type)
    + (`Observation_Request_1`)    
+ `allergy_intolerances` (array[`Allergy_Intolerance_Request`], optional, fixed-type)
+ immunizations (array[`Immunization_Request`], optional, fixed-type)
+ devices (array[`Device_Request`], optional, fixed-type)
+ `risk_assessments`(array[`Risk_Assessment_Request`], optional, fixed-type)
+ `medication_statements` (array[`Medication_Statement_Request`], optional, fixed-type)

### `Encounter_Response`
+ id: `465fb6fe-2dea-4b8a-9ef7-58379d1eaab0` (string, required)
+ `status`: `finised`  (string, required) - `dictionary eHealth/encounter_statuses`                   
+ `date`: `2018-08-02` (string, required)
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ `visit` (Reference, required, fixed-type)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `visit` (string)
                        
+ `episode` (Reference, required, fixed-type)   
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `episode` (string)

+ class  (Coding, required)
    + system : `eHealth/encounter_classes` (string)
    + code: `inpatient` (string) - `dictionary eHealth/encounter_classes`

    
+ type (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/encounter_types` (string)
            + code: `PC` (string) - `dictionary eHealth/encounter_types`


+ performer (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: employee (string)
                    
    
    + display: `–®–µ–≤—á–µ–Ω–∫–æ –û–ª–µ—Å—å –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á' (string, required) - This field is filled on creating and never updated after
+ reasons (array,required)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/ICPC2/reasons` (string) 
                + code: `T01` (string) - `dictionary eHealth/ICPC2/reasons`

    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/ICPC2/reasons` (string) 
                + code: `T90` (string) - `dictionary eHealth/ICPC2/reasons`

        
+ diagnoses (array, required, fixed-type)
    + (`Diagnosis_Referrence_Condition`)
        
        
+ actions (array, required, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
            + system: `eHealth/ICPC2/actions` (string)
            + code: `T47` (string)- `dictionary eHealth/ICPC2/actions`

    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
            + system: `eHealth/ICPC2/actions` (string)
            + code: `T47` (string)- `dictionary eHealth/ICPC2/actions`
+ division (Reference, optional, fixed-type)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `division` (string)
                    
+ prescriptions: '–î—ñ—î—Ç–∞ ‚Ññ1, –û–º–µ–ø—Ä–∞–∑–æ–ª—É 40 –º–≥ 1 —Ä–∞–∑ –Ω–∞ –¥–æ–±—É + –∞–º–æ–∫—Å–∏—Ü–∏–ª—ñ–Ω—É 500 –º–≥ + –º–µ—Ç—Ä–æ–Ω—ñ–¥–∞–∑–æ–ª—É 400 –º–≥ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ 500 –º–≥ –∞–±–æ —Ç–∏–Ω—ñ–¥–∞–∑–æ–ª—É 500 –º–≥ 3 —Ä–∞–∑–∏ –Ω–∞ –¥–æ–±—É –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ç–∏–∂–Ω—è' (string, optional)
+ `cancellation_reason` (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/episode_closing_reasons` (string)
            + code: `cured` (string) - wrong_patient, misspelling
            
+ `explanatory_letter`: `–î—ñ–∞–≥–Ω–æ–∑ –±—É–≤ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∏–π —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ ` (string, optional)    

### `Cancel_Encounter`
+ encounter (`Encounter_Base` , required, fixed-type)
    + `status`: `entered_in_error` (string) - `dictionary eHealth/encounter_statuses`
    + `explanatory_letter`: `–Ø, –®–µ–≤—á–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—ñ—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞, 20.07.2018 –∑–¥—ñ–π—Å–Ω–∏–ª–∞ –º–µ—Ö–∞–Ω—ñ—á–Ω—É –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ —Å–∏—Å—Ç–µ–º–∏.` (string, required)    
    + `cancellation_reason` (Codeable_Concept, required)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/cancellation_reasons` (string)
                + code: `misspelling` (string) - `dictionary eHealth/cancellation_reasons`
                    
+ conditions (array, optional, fixed-type)
    + (`Condition_Request`)
        + `verification_status`: `entered_in_error` (string) - `dictionary eHealth/condition_verification_statuses`  
    + (`Condition_Request_2`)
        + `verification_status`: `entered_in_error` (string)- `dictionary eHealth/condition_verification_statuses`
+ observations (array, optional, fixed-type)
    + (`Observation_Request_1`)
        + `status`: `entered_in_error` (string)- `dictionary eHealth/observation_statuses`
+ `allergy_intolerances` (array, optional, fixed-type)
    + (`Allergy_Intolerance_Request`)
        + `verification_status`: `entered_in_error` (string)- `dictionary eHealth/allergy_intolerance_verification_statuses`
+ immunizations (array, optional, fixed-type)
    + (`Immunization_Request`)
        + `status`: `entered_in_error` (string)- `dictionary eHealth/immunization_statuses`

+ devices (array, optional, fixed-type)
    + (`Device_Request`)
        + `status`: `entered_in_error` (string)- `dictionary eHealth/device_statuses`
+ `risk_assessments` (array, optional, fixed-type)
    + (`Risk_Assessment_Request`)
        + `status`: `entered_in_error` (string)- `dictionary eHealth/risk_assessment_statuses`
+ `medication_statements` (array, optional, fixed-type)
    + (`Medication_Statement_Request`)
        + `status`: `entered_in_error` (string)- `dictionary eHealth/medication_statement_statuses`

## Condition
### `Condition_Request`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ primary_source: `false` (boolean, required)
- One Of
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string) 
                + code: `mother` (string) - `dictionary eHealth/report_origins`
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
    + asserter(Reference, optional)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `patient` (string)
                        
        
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/ICD10/condition_codes` (string)
            + code: `A89` (string) - `dictionary - eHealth/ICD10/condition_codes`
            
+ clinical_status: `active` (string, required) - `dictionary - eHealth/condition_clinical_statuses`
+ verification_status: `provisional` (string, required) - `dictionary - eHealth/condition_verification_statuses`
+ severity(Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/condition_severities` (string)  
            + code: `55604002` (string) -`dictionary - eHealth/condition_severities`
            
    
+ `body_sites` (array, optional, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/body_sites` (string)
                + code: `181414000` (string) - `dictionary - eHealth/body_sites`
                
    
+ onset_date: `2018-10-08T09:46:37.694Z` (string, required)//Estimated or actual date,  date-time when condition starts
+ asserted_date: `2018-10-08T09:46:37.694Z` (string, requierd)//Date record was believed accurate last time
+ stage (object, optional)
    + summary (Codeable_Concept, required)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/condition_stages` (string)
                + code: `14803004` (string) - `dictionary - eHealth/condition_stages`
                
+ evidences (array, optional, fixed-type)
    + (object)
        + code (array, optional, fixed-type)
            + (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/ICPC2/reasons` (string)
                        + code: `169068008` (string) - `dictionary - eHealth/ICPC2/reasons`
                        
        + detail (array, optional, fixed-type)
            + (Reference)
                + identifier (Identifier)
                    + type (Codeable_Concept)
                        + coding (array, fixed-type)
                            + (Coding)
                                + code: `observation` (string)
                                
        


### `Condition_Request_2`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ primary_source: `true` (boolean, required)
- One Of
    + asserter(Reference, optional)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `patient` (string)
                            

        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string) 
                + code: `mother` (string) - `dictionary eHealth/report_origins`
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/ICD10/condition_codes` (string)
            + code: `K87` (string) - `dictionary - eHealth/ICD10/condition_codes`
            
+ clinical_status: `active` (string, required) - `dictionary - eHealth/condition_clinical_statuses`
+ verification_status: `provisional` (string, required) - `dictionary - eHealth/condition_verification_statuses`
+ severity(Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/condition_severities` (string)  
            + code: `55604002` (string) -`dictionary - eHealth/condition_severities`
            
    
+ `body_sites` (array, optional, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/body_sites` (string)
                + code: `181414000` (string) - `dictionary - eHealth/body_sites`
                
    
+ onset_date: `2018-08-02T10:45:16.000Z` (string, required)
+ asserted_date: `2018-10-08T09:46:37.694Z` (string, requierd)//Date record was believed accurate last time

+ stage (object, optional)
    + summary (Codeable_Concept, required)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/condition_stages` (string)
                + code: `14803004` (string) - `dictionary - eHealth/condition_stages`
                
                
+ evidences (array, optional, fixed-type)
    + (object)
        + code (array, optional, fixed-type)
            + (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/ICPC2/reasons` (string)
                        + code: `169068008` (string) - `dictionary - eHealth/ICPC2/reasons`
                        
                        
        + detail (array, optional, fixed-type)
            + (Reference)
                + identifier (Identifier)
                    + type (Codeable_Concept)
                        + coding (array, fixed-type)
                            + (Coding)
                                + code: `observation` (string)
                                
                            
        


### `Condition_Response`
+ id: `6fe6d880-f100-4e39-a278-1d14eb8472ef` (string, required)
+ primary_source: `true` (boolean, required)
- One Of
    
    + `asserter` (Reference, optional)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `patient` (string)
                        
        + display: –®–µ–≤—á–µ–Ω–∫–æ –û–ª–µ—Å—å –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á (string, required) - This field is filled on creating and never updated after
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string) 
                + code: `mother` (string) - `dictionary eHealth/report_origins`
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)

                    
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/ICD10/condition_codes` (string)
            + code: `K87` (string) - `dictionary - eHealth/ICD10/condition_codes`
            
+ clinical_status: `active` (string, required) - `dictionary - eHealth/condition_clinical_statuses`
+ verification_status: `provisional` (string, required) - `dictionary - eHealth/condition_verification_statuses`
+ severity(Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/condition_severities` (string)  
            + code: `55604002` (string) -`dictionary - eHealth/condition_severities`
            
    
+ `body_sites` (array, optional, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/body_sites` (string)
                + code: `181414000` (string) - `dictionary - eHealth/body_sites`
                
    
+ onset_date: `2018-10-08T09:46:37.694Z` (string, required)
+ asserted_date: `2018-10-08T09:46:37.694Z` (string, requierd)//Date record was believed accurate last time
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ stage (object, optional)
    + summary (Codeable_Concept, required)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/condition_stages` (string)
                + code: `14803004` (string) - `dictionary - eHealth/condition_stages`
                
+ evidences (array, optional, fixed-type)
    + (object)
        + codes (array, optional, fixed-type)
            + (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/ICPC2/reasons` (string)
                        + code: `169068008` (string) - `dictionary - eHealth/ICPC2/reasons`
                        
        + details (array, optional, fixed-type)
            + (Reference)
                + identifier (Identifier)
                    + type (Codeable_Concept)
                        + coding (array, fixed-type)
                            + (Coding)
                                + code: `observation` (string)
                                
        




## Observation

### `Observation_Request_1`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ status: `valid` (string, required) - `dictionary - eHealth/observation_statuses`
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    

                        

+ categories (array, required)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/observation_categories` (string)
                + code: `vital_signs` (string) - `dictionary - eHealth/observation_categories`
                

+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/LOINC/observation_codes` (string)
            + code: `10569-2` (string)- `dictionary - eHealth/LOINC/observation_codes`
            

- One Of
    + effective_date_time: `2018-08-02T10:45:16.000Z` (string, optional)
    + effective_period (Period, optional, fixed-type)
+ issued: `2018-08-02T10:45:16.000Z` (string, required)

+ primary_source: `true` (boolean, required)
- One Of
    + `performer` (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)


+ interpretation (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/observation_interpretations` (string)
            + code: `L` (string) `dictionary - eHealth/observation_interpretations`
            
    
+ comment: `Some comment` (string, optional)
+ `body_site` (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string) 
            + code: `1341001:272741003=7771000` (string)- `dictionary -  eHealth/body_sites`
            

+ method (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string)
            + code: `255459008` (string) - `dictionary - eHealth/observation_methods`
            

- One Of
    + value_quantity (Quantity, required)
    + value_codeable_concept (Codeable_Concept, required)
    + value_sampled_data (object, required)
        + origin (number, optional) //SimpleQuantity Zero value and units
        + period (number, optional) // decimal Number of milliseconds between samples
        + factor (number, optional) // decimal Multiply data by this before adding to origin
        + lower_limit (number, optional)// decimal Lower limit of detection
        + upper_limit (number, optional) // Œ£ 0..1 decimal Upper limit of detection
        + dimensions (number, optional) // positiveInt Number of sample points at each time point
        + data (string, required) // Decimal values with spaces, or "E" | "U" | "L"
    + value_string (string, required)
    + value_boolean (boolean, required)
    + value_range (Range, required, fixed-type)
    + value_ratio (object, required)//Need an example 
        + numerator (Quantity, required)
        + denominator (Quantity, required)
    + value_time (string, required)
    + value_date_time (string, required)
    + value_period (Period, required)
+ reference_ranges (array, optional, fixed-type)
    + (object)
        + low (Quantity, optional)
        + high (Quantity, optional)
            + value: `27,5` (number, required)
            + comparator: `<` (string, required)
        + type (Codeable_Concept, optional)
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/reference_range_types` (string)
                    + code: `normal` (string) - `dictionary - eHealth/reference_range_types`
                        
        + `applies_to`(Codeable_Concept, optional)
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/reference_range_applications` (string)
                    + code: `male` (string) - `dictionary - eHealth/reference_range_applications`
                    
        + age (Range, optional)
            + low (Quantity, optional)
                + value : `18` (number, required)
                + comparator : `>` (string, optional)
                + unit : `years` (string, optinal)
                - system  (string, optional)
                - code (string, optional)
            + high (Quantity, optional)
                + value : `35` (number, required)
                + comparator : `<` (string, optional)
                + unit : `years` (string, optinal)
                - system (string, optional)
                - code (string, optional)
        + text: `Some text` (string, optional)
+ reaction_on (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `immunization` (string)
    
+ components (array, optional, fixed-type)
    + (object)
        + code (Codeable_Concept, required)
        - One Of
            + value_string: `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.` (string, required)
            + value_quantity (Quantity, required)
            + value_codeable_concept (Codeable_Concept, required)
            + value_sampled_data (object, required)
                + origin (number, optional) //SimpleQuantity Zero value and units
                + period (number, optional) // decimal Number of milliseconds between samples
                + factor (number, optional) // decimal Multiply data by this before adding to origin
                + lowerLimit (number, optional)// decimal Lower limit of detection
                + upperLimit (number, optional) // Œ£ 0..1 decimal Upper limit of detection
                + dimensions (number, optional) // positiveInt Number of sample points at each time point
                + data (string, required) // Decimal values with spaces, or "E" | "U" | "L"
            
            + value_boolean (boolean, required)
            + value_range (object, required, fixed-type)
                + low (Quantity, required)
                + high (Quantity, required)
            + value_ratio (object, required)//Need an example 
                + numerator (Quantity, required)
                + denominator (Quantity, required)
            + value_time (string, required)
            + value_date_time (string, required)
            + value_period (Period, required)
        + interpretation (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/observation_interpretations` (string)
                    + code: `L` (string) `dictionary - eHealth/observation_interpretations`
                    
        + reference_ranges (array, optional, fixed-type)
            + (object)
                + low (Quantity, optional)
                + high (Quantity, optional)
                    + value: `27,5` (number, required)
                    + comparator: `<` (string, required)
                + type (Codeable_Concept, optional)
                    +  coding (array, fixed-type)
                        + (Coding)
                            + system: `eHealth/reference_range_types` (string)
                            + code: `normal` (string) - `dictionary - eHealth/reference_range_types`
                                
                + applies_to (Codeable_Concept, optional)
                    +  coding (array, fixed-type)
                        + (Coding)
                            + system: `eHealth/reference_range_applications` (string)
                            + code: `male` (string) - `dictionary - eHealth/reference_range_applications`
                            
                + age (Range, optional)
                    + low (Quantity, optional)
                        + value : `18` (number, required)
                        + comparator : `>` (string, optional)
                        + unit : `years` (string, optinal)
                        - system  (string, optional)
                        - code (string, optional)
                    + high (Quantity, optional)
                        + value : `35` (number, required)
                        + comparator : `<` (string, optional)
                        + unit : `years` (string, optinal)
                        - system (string, optional)
                        - code (string, optional)
                
                + text: `Some text` (string, optional)
                
    

### `Observation_Request_2`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ status: `valid` (string, required) - `dictionary - eHealth/observation_statuses`
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    

                        

+ categories (array, required)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/observation_categories` (string)
                + code: `vital_signs` (string) - `dictionary - eHealth/observation_categories`
                

+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/LOINC/observation_codes` (string)
            + code: `10569-2` (string)- `dictionary - eHealth/LOINC/observation_codes`
            

- One Of
    + effective_date_time: `2018-08-02T10:45:16.000Z` (string, optional)
    + effective_period (Period, optional, fixed-type)
+ issued: `2018-08-02T10:45:16.000Z` (string, required)
+ primary_source: `true` (boolean, required)
- One Of
    + `performer` (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)


+ interpretation (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/observation_interpretations` (string)
            + code: `L` (string) `dictionary - eHealth/observation_interpretations`
            
    
+ comment: `Some comment` (string, optional)
+ `body_site` (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string) 
            + code: `1341001:272741003=7771000` (string)- `dictionary -  eHealth/body_sites`
            

+ method (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string)
            + code: `255459008` (string) - `dictionary - eHealth/observation_methods`
            

- One Of
    + value_quantity (Quantity, required)
    + value_codeable_concept (Codeable_Concept, required)
    + value_sampled_data (object, required)
        + origin (number, optional) //SimpleQuantity Zero value and units
        + period (number, optional) // decimal Number of milliseconds between samples
        + factor (number, optional) // decimal Multiply data by this before adding to origin
        + lower_limit (number, optional)// decimal Lower limit of detection
        + upper_limit (number, optional) // Œ£ 0..1 decimal Upper limit of detection
        + dimensions (number, optional) // positiveInt Number of sample points at each time point
        + data (string, required) // Decimal values with spaces, or "E" | "U" | "L"
    + value_string (string, required)
    + value_boolean (boolean, required)
    + value_range (Range, required, fixed-type)
    + value_ratio (object, required)//Need an example 
        + numerator (Quantity, required)
        + denominator (Quantity, required)
    + value_time (string, required)
    + value_date_time (string, required)
    + value_period (Period, required)
+ reference_ranges (array, optional, fixed-type)
    + (object)
        + low (Quantity, optional)
        + high (Quantity, optional)
            + value: `27,5` (number, required)
            + comparator: `<` (string, required)
        + type (Codeable_Concept, optional)
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/reference_range_types` (string)
                    + code: `normal` (string) - `dictionary - eHealth/reference_range_types`
                        
        + `applies_to`(Codeable_Concept, optional)
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/reference_range_applications` (string)
                    + code: `male` (string) - `dictionary - eHealth/reference_range_applications`
                    
        + age (Range, optional)
            + low (Quantity, optional)
                + value : `18` (number, required)
                + comparator : `>` (string, optional)
                + unit : `years` (string, optinal)
                - system  (string, optional)
                - code (string, optional)
            + high (Quantity, optional)
                + value : `35` (number, required)
                + comparator : `<` (string, optional)
                + unit : `years` (string, optinal)
                - system (string, optional)
                - code (string, optional)
        + text: `Some text` (string, optional)
+ reaction_on (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `immunization` (string)
    
+ components (array, optional, fixed-type)
    + (object)
        + code (Codeable_Concept, required)
        - One Of
            + value_string: `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.` (string, required)
            + value_quantity (Quantity, required)
            + value_codeable_concept (Codeable_Concept, required)
            + value_sampled_data (object, required)
                + origin (number, optional) //SimpleQuantity Zero value and units
                + period (number, optional) // decimal Number of milliseconds between samples
                + factor (number, optional) // decimal Multiply data by this before adding to origin
                + lowerLimit (number, optional)// decimal Lower limit of detection
                + upperLimit (number, optional) // Œ£ 0..1 decimal Upper limit of detection
                + dimensions (number, optional) // positiveInt Number of sample points at each time point
                + data (string, required) // Decimal values with spaces, or "E" | "U" | "L"
            
            + value_boolean (boolean, required)
            + value_range (object, required, fixed-type)
                + low (Quantity, required)
                + high (Quantity, required)
            + value_ratio (object, required)//Need an example 
                + numerator (Quantity, required)
                + denominator (Quantity, required)
            + value_time (string, required)
            + value_date_time (string, required)
            + value_period (Period, required)
        + interpretation (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/observation_interpretations` (string)
                    + code: `L` (string) `dictionary - eHealth/observation_interpretations`
                    
        + reference_ranges (array, optional, fixed-type)
            + (object)
                + low (Quantity, optional)
                + high (Quantity, optional)
                    + value: `27,5` (number, required)
                    + comparator: `<` (string, required)
                + type (Codeable_Concept, optional)
                    +  coding (array, fixed-type)
                        + (Coding)
                            + system: `eHealth/reference_range_types` (string)
                            + code: `normal` (string) - `dictionary - eHealth/reference_range_types`
                                
                + applies_to (Codeable_Concept, optional)
                    +  coding (array, fixed-type)
                        + (Coding)
                            + system: `eHealth/reference_range_applications` (string)
                            + code: `male` (string) - `dictionary - eHealth/reference_range_applications`
                            
                + age (Range, optional)
                    + low (Quantity, optional)
                        + value : `18` (number, required)
                        + comparator : `>` (string, optional)
                        + unit : `years` (string, optinal)
                        - system  (string, optional)
                        - code (string, optional)
                    + high (Quantity, optional)
                        + value : `35` (number, required)
                        + comparator : `<` (string, optional)
                        + unit : `years` (string, optinal)
                        - system (string, optional)
                        - code (string, optional)
                
                + text: `Some text` (string, optional)
                
    


### `Observation_Response`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ status: `valid` (string, required)
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    

                    

+ categories (array, required)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/observation_categories` (string)
                + code: `vital_signs` (string) - `dictionary - eHealth/observation_categories`

+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/LOINC/observation_codes` (string)
            + code: `10569-2` (string)- `dictionary - eHealth/LOINC/observation_codes`
            

- One Of
    + effective_date_time: `2018-10-08T09:46:37.694Z` (string, optional)
    + effective_period (Period, optional)
+ issued: `2018-08-02T10:45:16.000Z` (string, required)
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ primary_source: `false` (boolean, required)
- One Of
    + `performer` (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
        + display: –®–µ–≤—á–µ–Ω–∫–æ –û–ª–µ—Å—å –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á (string, required) - This field is filled on creating and never updated after
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)

+ interpretation (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/observation_interpretations` (string)
            + code: `L` (string) `dictionary - eHealth/observation_interpretations`
            
    
+ comment: `Some comment` (string, optional)
+ `body_site` (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string) 
            + code: `1341001:272741003=7771000` (string)- `dictionary -  eHealth/body_sites`
            

+ method (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `http://hl7.org/fhir/v2/0078` (string)
            + code: `255459008` (string) - `dictionary - eHealth/observation_methods`
            

- One Of
    + value_quantity (Quantity, required)
    + value_codeable_concept (Codeable_Concept, required)
    + value_sampled_data (object, required)
        + origin (number, optional) //SimpleQuantity Zero value and units
        + period (number, optional) // decimal Number of milliseconds between samples
        + factor (number, optional) // decimal Multiply data by this before adding to origin
        + lowerLimit (number, optional)// decimal Lower limit of detection
        + upperLimit (number, optional) // Œ£ 0..1 decimal Upper limit of detection
        + dimensions (number, optional) // positiveInt Number of sample points at each time point
        + data (string, required) // Decimal values with spaces, or "E" | "U" | "L"
    + value_string (string, required)
    + value_boolean (boolean, required)
    + value_range (Range, required, fixed-type)
    + value_ratio (object, required)//Need an example 
        + numerator (Quantity, required)
        + denominator (Quantity, required)
    + value_time (string, required)
    + value_date_time (string, required)
    + value_period (Period, required)

                
                

## `Immunization`

### `Immunization_Request`

+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required) 
+ status : `completed` (string, required), //  completed | entered-in-error
+ not_given : `false` (boolean, required), //   Flag for whether immunization was given
+ `vaccine_code` : (Codeable_Concept, required), //   Vaccine product administered
    +  coding (array, fixed-type)
        + (Coding)
            + system: ` http://snomed.info/sct` (string)
            + code: `FLUVAX` (string) - `dictionary - eHealth/vaccine_code`
            

+ context : ( Reference, required), // Encounter administered as part of
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ date :  `2018-10-08T09:46:37.694Z` (string, required), // Vaccination administration date

+ primary_source: `false` (boolean, required)
- One Of
    + `performer` (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
+ legal_entity : ( Reference, optional), // Where vaccination occurred
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
                    
+ manufacturer : `VacinePro Manufacturer` (string, optional), // Vaccine manufacturer
+ lot_number : `AAJN11K` (string, optional), // Vaccine lot number
+ expiration_date : `2018-10-08T09:46:37.694Z` (string, optional), // Vaccine expiration date
+ site : ( Codeable_Concept, optional), // Body site vaccine  was administered
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/body_sites` (string)
            + code: `LA` (string) - `dictionary - eHealth/body_sites`
            
+ route : ( Codeable_Concept , optional), // How vaccine entered body
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/vaccination_routes` (string)
            + code: `IM` (string)- `dictionary - eHealth/immunization_routes`
            
+ dose_quantity: ( Quantity, optional), // Amount of vaccine administered
    + value : `18` (number, required)
    - comparator  (string, optional)
    + unit : `mg` (string, optinal)
    + system: `eHealth/ucum/units` (string, optional)
    - code (string, optional)

+ `explanation`  (object , optional)// Administration/non-administration reasons
    - One Of
        + `reasons`  (array, optional, fixed_type) // Why immunization occurred
            + (Codeable_Concept)
                +  coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/reason_explanations` (string)
                        + code: `429060002` (string) `dictionary - eHealth/reason_explanations`
                        
        + `reasons_not_given`  (array, optional, fixed_type), // Why immunization did not occurr
            + (Codeable_Concept)
),
+ reactions : (array, optional) // Details of a reaction that follows immunization
    + (object)
        + date : `2018-10-08T09:46:37.694Z` (string, optional), // When reaction started
        + detail : ( Reference, optional) , // Additional information on reaction Observation
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `observation` (string)
                        
        + reported : `true` (boolean, optional) // Indicates self-reported reaction

+ `vaccination_protocols` : (array, optional, fixed_type)// What protocols was followed
    + (object)
        + dose_sequence : 1 (number, optional), // Dose number within series
        + description : Vaccination Protocol Sequence 1 (string, optional), // Details of vaccine protocol
        + `authority`  (Codeable_Concept , optional) // Who is responsible for protocol
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_authorities` (string)
                    + code: `WVO` (string)
                        
        + series : Vaccination Series 1 (string, optional), // Name of vaccine series
        + series_doses : 2 (number, optional), // Recommended number of doses for immunity
        + target_diseases : (array, required)
            + (Codeable_Concept ), //   Disease immunized against
                +  coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/vaccination_target_diseases` (string)
                        + code: `1857005` (string) -  `dictionary - eHealth/vaccination_target_diseases` 
                        
        + `dose_status` : ( Codeable_Concept, required), // Indicates if dose counts towards immunity
        +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_dose_statuses` (string)
                    + code: `count` (string) - `eHealth/vaccination_dose_statuses`

        + `dose_status_reason` : ( Codeable_Concept,optional)  // Why dose does (not) count
        +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_dose_statuse_reasons` (string)
                    + code: `coldchbrk` (string) - `eHealth/vaccination_dose_statuse_reasons`
    
                    

### `Immunization_Response`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required) 
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ status : `completed` (string, required), //  completed | entered-in-error
+ not_given : `false` (boolean, required), //   Flag for whether immunization was given
+ `vaccine_code` : (Codeable_Concept, required), //   Vaccine product administered
    +  coding (array, fixed-type)
        + (Coding)
            + system: ` http://snomed.info/sct` (string)
            + code: `FLUVAX` (string) - `dictionary - eHealth/vaccine_code`
            

+ context : ( Reference, required), // Encounter administered as part of
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ date :  `2018-10-08T09:46:37.694Z` (string, required), // Vaccination administration date
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ primary_source: `false` (boolean, required)
- One Of
    + `performer` (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
        + display: `–®–µ–≤—á–µ–Ω–∫–æ –¢–µ—Ç—è–Ω–∞ –í—ñ–∫—Ç–æ—Ä—ñ–≤–Ω–∞`    (string, required) - This field is filled on creating and never updated after           
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
+ legal_entity : ( Reference, optional), // Where vaccination occurred
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
                    
+ manufacturer : `VacinePro Manufacturer` (string, optional), // Vaccine manufacturer
+ lot_number : `AAJN11K` (string, optional), // Vaccine lot number
+ expiration_date : `2018-10-08T09:46:37.694Z` (string, optional), // Vaccine expiration date
+ site : ( Codeable_Concept, optional), // Body site vaccine  was administered
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/body_sites` (string)
            + code: `LA` (string)
            
+ route : ( Codeable_Concept , optional), // How vaccine entered body
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/vaccination_routes` (string)
            + code: `IM` (string) `dictionary- eHealth/vaccination_routes`
            
+ dose_quantity: ( Quantity, optional), // Amount of vaccine administered
    + value : `18` (number, required)
    - comparator  (string, optional)
    + unit : `mg` (string, optinal)
    + system: `eHealth/dose_quantities` (string, optional)
    - code (string, optional)

+ `explanation`  (object , optional)// Administration/non-administration reasons
    - One Of
        + `reasons` : (array, optional, fixed_type) // Why immunization occurred
            + (Codeable_Concept)
                +  coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/reason_explanations` (string)
                        + code: `429060002` (string) - `dictionaries- eHealth/reason_explanations`
                        
        + `reasons_not_given` : (array, optional, fixed_type), // Why immunization did not occurr
            + (Codeable_Concept)
),
+ reactions : (array, optional) // Details of a reaction that follows immunization
    + (object)
        + date : `2018-10-08T09:46:37.694Z` (string, optional), // When reaction started
        + detail : ( Reference, optional) , // Additional information on reaction Observation
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `observation` (string)
                        
        + reported : `true` (boolean, optional) // Indicates self-reported reaction

+ `vaccination_protocols` : (array, optional, fixed_type)// What protocols was followed
    + (object)
        + dose_sequence : 1 (number, optional), // Dose number within series
        + description : Vaccination Protocol Sequence 1 (string, optional), // Details of vaccine protocol
        + `authority`  (Codeable_Concept , optional) // Who is responsible for protocol
            +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_authorities` (string)
                    + code: `WVO` (string)
                        
        + series : Vaccination Series 1 (string, optional), // Name of vaccine series
        + series_doses : 2 (number, optional), // Recommended number of doses for immunity
        + target_diseases : (array, required)
            + (Codeable_Concept ), //   Disease immunized against
                +  coding (array, fixed-type)
                    + (Coding)
                        + system: `eHealth/vaccination_target_diseases` (string)
                        + code: `1857005` (string) `dictionary - eHealth/vaccination_target_diseases`
                        
        + `dose_status` : ( Codeable_Concept, required), // Indicates if dose counts towards immunity
        +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_dose_statuses` (string)
                    + code: `count` (string) `dictionary - eHealth/vaccination_dose_statuses`

        + `dose_status_reason` : ( Codeable_Concept,optional)  // Why dose does (not) count
        +  coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/vaccination_dose_statuse_reasons` (string)
                    + code: `coldchbrk` (string) `dictionary - eHealth/vaccination_dose_statuse_reasons`
            


## `Allergy_Intolerance`
### `Allergy_Intolerance_Request`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required) 
+ `clinical_status` : `active` (string, required) - `dictionary - eHealth/allergy_intolerance_clinical_statuses`
+ `verification_status` : `confirmed` (string, required) - `dictionary - eHealth/allergy_intolerance_verification_statuses`
+ type : `allergy` (string, required)- `dictionary - eHealth/allergy_intolerance_types`
+ category : `food`(string, required)- `dictionary - eHealth/allergy_intolerance_categories`
+ criticality : `low`(string, required)- `dictionary - eHealth/allergy_intolerance_criticalities`
+ context (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ code  ( Codeable_Concept, required ), // Code that identifies the allergy or intolerance
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/allergy_intolerances_codes` (string)
            + code: `227493005` (string)- `dictionary - eHealth/allergy_intolerances_codes`

+ onset_date_time : `2018-10-08T09:46:37.694Z` (string, required)
+ asserted_date: `2018-10-08T09:46:37.694Z` (string, required)

+ primary_source: `true` (boolean, required)
- One Of
    + asserter (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
+ last_occurrence : `2017-10-08T00:00:00.000Z` (string, optional) , // Date(/time) of last known occurrence of a reaction


### `Allergy_Intolerance_Response`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required) 
+ `clinical_status` : `active` (string, required) - `dictionary - eHealth/allergy_intolerance_clinical_statuses`
+ `verification_status` : `confirmed` (string, required) - `dictionary - eHealth/allergy_intolerance_verification_statuses`
+ type : `allergy` (string, required)- `dictionary - eHealth/allergy_intolerance_types`
+ category : `food`(string, required)- `dictionary - eHealth/allergy_intolerance_categories`
+ criticality : `low`(string, required)- `dictionary - eHealth/allergy_intolerance_criticalities`
+ context: (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
                    
+ code ( Codeable_Concept, required ), // Code that identifies the allergy or intolerance
    +  coding (array, fixed-type)
        + (Coding)
            2+ system: `eHealth/allergy_intolerances_codes` (string)
            + code: `227493005` (string)- `dictionary - eHealth/allergy_intolerances_codes`
                

+ onset_date_time : `2016-01-01T00:00:00.000Z` (string, required)
+ asserted_date: `2018-08-02T10:45:00.000Z` (string, required)
+ inserted_at: `2018-08-02T10:45:16.000Z` (string, required)
+ updated_at: `2018-08-02T10:45:16.000Z` (string, required)
+ primary_source: `true` (boolean, required)
- One Of
    + asserter (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
        + display: –®–µ–≤—á–µ–Ω–∫–æ –û–ª–µ—Å—å –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á (string, required)
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
            
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
+ last_occurrence : `2018-07-02T00:00:00.000Z` (string, optional) , // Date(/time) of last known occurrence of a reaction


## `Risk_Assesment`
### `Risk_Assessment_Request`
+ id: `70a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required) 
+ status: `preliminary` (string, required)
+ method ( Codeable_Concept, optional) 
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/risk_assesment_methods` (string)
            + code: `deafult_code` (string)- `dictionary - eHealth/risk_assesment_methods`
+ code ( Codeable_Concept, required)
    +  coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/risk_assesment_codes` (string)
            + code: `R80` (string)- `dictionary - eHealth/risk_assesment_codes`
+ context: (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
+ asserted_date: `2018-08-02T10:45:00.000Z` (string, required)

+ primary_source: `true` (boolean, required)
- One Of
    + performer (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
                
        + text: `–ì–∞–ª–∏–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞` (string)
- One Of
    + reason_codes (array, fixed-type)
        + object (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/risk_assessment_reasons` (string)
                    + code: `default_reason` (string)
    + reason_references (array, fixed-type)
        + object (Codeable_Concept, optional)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `condition` (string)
+ basis (Ext_Reference, optional)
    + references (array, fixed-type)
        + (object)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `observation` (string)
+ predictions (array, optional, fixed-type)
    + (object)
        + outcome (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/risk_assessment_outcomes` (string)
                    + code: `default_outcome` (string)
        - One Of
            + probability_range (Range, optional)
            + probability_decimal (number, optional)

        + `qualitative_risk` (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/risk_assessment_qualitative_risks` (string)
                    + code: `default_qualitative_risk` (string)
        + relative_risk(number, optional)
        - One Of
            + when_range (Range, optional)
            + when_period (Period, optional)
            
        + rationale: `some text` (string, optional)
            
+ mitigation: `some text` (string, optional)
+ comment: `some text` (string, optional)


### `Risk_Assessment_Response`
+ include `Risk_Assessment_Request`
+ inserted_at: `2018-08-02T10:55:00.000Z` (string, optional)
+ updated_at: `2018-08-02T10:55:00.000Z` (string, optional)

## `Device`
### `Device_Request`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ status:  `inactive` (string, required) - `dictionary - eHealth/device_statuses`
+ asserted_date: `2018-08-02T10:45:00.000Z` (string, required)
+ usage_period (Period, required)
    + start : `2000-01-01T00:00:00.000Z`(string, required) 
    + end : `2018-08-02T11:00:00.000Z`(string, optional)

+ context: (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
+ primary_source: `true` (boolean, required)
- One Of
    + asserter (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
+ type (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/device_types` (string) 
            + code: `Spine_board` (string)- `dictionary -  eHealth/device_types`
+ lot_number: `RZ12345678` (string, optional)
+ manufacturer: `GlobalMed, Inc` (string, optional)
+ manufacture_date: `1999-01-01T00:00:00.000Z` (string, optional)
+ expiration_date: `2020-01-01T00:00:00.000Z` (string, optional)
+ model: `NSPX30` (string, optional)
+ version: `v1.0.1` (string, optional)
+ note: `–Ü–º–ø–ª–∞–Ω—Ç –±—É–≤ –≤–∏–ª—É—á–µ–Ω–∏–π –ø–æ –ø—Ä–∏—á–∏–Ω—ñ –∑–∞–º—ñ–Ω–∏ –Ω–∞ –Ω–æ–≤–∏–π` (string, optional)

## `Medication Statement`
### `Medication_Statement_Request`
+ id: `80a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ based_on (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `medication_request` (string)
+ asserted_date: `2018-08-02T10:45:00.000Z` (string, required)
+ status:  `active` (string, required) - `dictionary - eHealth/medication_satement_statuses`
+ context: (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
+ primary_source: `true` (boolean, required)
- One Of
    + asserter (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
+ effective_period: `–í–∂–∏–≤–∞—î –∑ 2017-–≥–æ —Ä–æ–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ` (string, optional) 

+ `medication_code` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/medical_statement_medications` (string) 
            + code: `Spine_board` (string)- `dictionary -  eHealth/medication_statement_medications`
+ note: `Some text` (string, optional)
+ dosage: `5 ml/day` (string, optional)

##`Diagnostic Report`
### `Diagnostic_Report_Request`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ based_on (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `service_request` (string)
+ initial_episode( Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `episode` (string)
+ status: `final` (string, required)
+ categoty (array, required, fixed-type)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `LAB` (string)
    + (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/diagnostic_report_categories` (string)
                + code: `MB` (string)
    
+ code (array, required, fixed-type)
+ (Codeable_Concept)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/LOINC/diagnostic_report_codes` (string)
                + code: `10217-8` (string)

+ encounter (Reference, optional)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
+ effective_period(Period, optional)
+ issued: `2018-10-08T09:46:37.694Z` (string, required)
+ primary_source: `true` (boolean, required)
- One Of
    + performer (Reference, required)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
                        
    + `report_origin` (Codeable_Concept, optional)
        + coding (array, fixed-type)
            + (Coding)
                + system: `eHealth/report_origins` (string)
                + code: `mother` (string)
+ recored_by (Reference, required)
    + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `employee` (string)
- One Of                        
    + `results_interpriter_reference` (Reference, optional)
        + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `employee` (string)
    + `results_interpriter_string`: `–û–ø–∞–Ω–∞—Å–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ –í–∞—Å–∏–ª—å–æ–≤–∏—á` (string, optional)
+ conclusion: `At risk of osteoporotic fracture` (string, optional)
+ `conclusion_code` (Codeable_Concept, optional)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/clinical_findings` (string)
            + code: `109006` (string)

### `Diagnostic_Report_Response`
+ include `Diagnostic_Report_Request`
+ inserted_at: `2018-08-02T10:55:00.000Z` (string, optional)
+ updated_at: `2018-08-02T10:55:00.000Z` (string, optional)

### `Medication_Statement_Response`
+ include `Medication_Statement_Request`
+ inserted_at: `2018-08-02T10:55:00.000Z` (string, optional)
+ updated_at: `2018-08-02T10:55:00.000Z` (string, optional)

### `Device_Response`
+ include `Device_Request`
+ inserted_at: `2018-08-02T10:55:00.000Z` (string, optional)
+ updated_at: `2018-08-02T10:55:00.000Z` (string, optional)

### Job
+ status: `pending` (string, required) - status of request processing.
+ eta: `2018-08-02T10:45:16.000Z` (string, optional) - estimated time of arrival
+ status_code: `202` (string, optional) - processing result. Is relevant only for the processed jobs
- one of
    - links (array[Link], optional) - links to resources that has been impactedas a job processing result
    - response_data (object, optional) - response data payload of the request that has initiated this job. It's Structure depends on the request.

### Job_Error
+ status: `error` (string, required) - status of request processing
+ status_code: `422` (string, required) - processing result
+ errors (array, optional, fixed-type)
    + (object)
        + include `Error`

### Error
+ code: 422 (string, required)
+ type: type_atom (string, required) - Atom that represents error type.
+ message: Error description (string, required) - Human-readable error message. This is for developers, not end-users.


### Link
+ entity: `job` (string, required) - name of the entity that link follows to
+ href: `/Jobs/NBXk9EyErUZv1RhXgyvgg` (string, required) - link to entity

### Search_params
+ `page`: 2 (number) - Page number.    
+ `page_size`: 50 (number) - A limit on the number of objects to be returned, between 1 and 100. Default: 50

+ `encounter_id`: 09dc3ed7-2169-45d8-8fa3-d918c6839bf9
+ `episode_id`: f48d1b6c-a021-4d6a-a5a4-aee93e152ecc
+ `inserted_at_from`:`1990-01-01`
+ `inserted_at_to`: `2000-01-01`

## Service Request

### `Service_Request_Base`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ requisition: `AX654654T` (string, required)
+ `status`: `active` (string, required)
+ `status_history`  (array, optional, fixed-type)
    + (object)
        + status: `closed` (string, required)
        + `status_reason` (Codeable_Concept, optional)
            + coding (array, fixed-type)
                + (Coding)
                    + system: `eHealth/service_request_status_reasons` (string)
                    + code: `cured` (string)
        + `inserted_at`: `2018-08-02T10:45:16.000Z` (string, required)
+ intent: `order` (string, required)
+ priority: `routine` (string, optional)
+ category (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/service_request_categories` (string)
            + code: `409063005` (string)
+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: ` eHealth/SNOMED/procedure_codes` (string)
            + code: `128004` (string)
+ `subject` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
- One Of
    - `occurrence_date_time`: `2018-08-02T10:45:16.000Z` (string, optional)
    - `occurrence_period` (`Period`, optional)
+ authored_on: `2018-08-02T10:45:16.000Z` (string, required)
+ `requester` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ `performer_type` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/service_request_performer_roles` (string)
            + code: `psychiatrist` (string)
+ `reason_reference` (array, optional)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `condition` (string)
+ `supporting_info` (array, optional, fixed-type)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)
+ note: `Some notes` (string, optional)
+ patient_instruction: `Some patient instructions` (string, optional)
+ expiration_date: `2018-08-02T10:45:16.000Z` (string, optional)
+ `permitted_episodes` (array, optional)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)
+ `used_by` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `legal_entity` (string)
+ `inserted_at`: `2018-08-02T10:45:16.000Z` (string, required)
+ `updated_at`: `2018-08-02T10:45:16.000Z` (string, required)

### `Service_Request_Show`
+ include `Service_Request_Base`

### `Service_Request_Create`
+ id: `90a9e15b-b71b-4caf-8f2e-ff247e8a5600` (string, required)
+ status: `active` (string, required)
+ intent: `order` (string, required)
+ priority: `routine` (string, optional)
+ category (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/service_request_categories` (string)
            + code: `409063005` (string)
+ code (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/procedure_codes` (string)
            + code: `128004` (string)
+ `context` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `encounter` (string)
- One Of
    - `occurrence_date_time`: `2018-08-02T10:45:16.000Z` (string, optional)
    - `occurrence_period` (`Period`, optional)
+ authored_on: `2018-08-02T10:45:16.000Z` (string, required)
+ `requester` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ `performer_type` (Codeable_Concept, required)
    + coding (array, fixed-type)
        + (Coding)
            + system: `eHealth/SNOMED/service_request_performer_roles` (string)
            + code: `psychiatrist` (string)
+ `reason_reference` (array, optional)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `condition` (string)
+ `supporting_info` (array, optional, fixed-type)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)
+ note: `Some notes` (string, optional)
+ patient_instruction: `Some patient instructions` (string, optional)
+ `permitted_episodes` (array, optional)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)

### `Use_Service_Request_Request`
+ `used_by` (Reference, required)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
        + value: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required)

## Approvals

### `Approval_Request`
- One Of
    + `resources` (array, optional) - list of resources that are requested access to be granted
        + (Reference)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `episode_of_care` (string)
                + value: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required)
    + `service_request` (object, optional)
        + (Reference)
            + identifier (Identifier)
                + type (Codeable_Concept)
                    + coding (array, fixed-type)
                        + (Coding)
                            + code: `service_request` (string)
                + value: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required)
+ `granted_to` (Reference, required) - type and identifier of entity to whom access has been granted (employee or legal_entity)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ access_level: `read` (enum, required) - only `read` is supported
    - read

### `Approval_Response_crud`
+ `id`: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required) - id of approval
+ `patient_id`: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required) - mpi_id hash
+ `granted_resources` (array, required) - list of resources that are allowed by approval
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)
            + value: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required)
+ `granted_to` (Reference, required) - type and identifier of entity to whom access has been granted (employee or legal_entity)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ expires_at: 1498749591 (number, required) - expiration date-time timestamp
+ `granted_by` (Reference, required) - type and identifier of entity who has granted access - user_id
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `mpi-hash` (string)
+ reason (Reference, optional) - type and identifier of entity based on which approval has been created
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ `status`: new (enum, required) - status of approval
    - new
    - active
+ access_level: `read` (string, required) - only `read` is supported
+ `authentication_method` (object, required)
    + type: `OTP` (enum, required)
        - OTP
        - OFFLINE
        - NA
    + number: `+38093*****85` (string, optional)
+ `inserted_at`: `2018-08-02T10:45:16.000Z` (string, required)
+ `inserted_by`: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required) - id of user who has inserted record
+ `updated_at`: `2018-08-02T10:45:16.000Z` (string, required)
+ `updated_by`: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required) - id of user who has inserted record

### `Approval_Response`
+ `id`: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required) - id of approval
+ `granted_resources` (array, required)
    + (Reference)
        + identifier (Identifier)
            + type (Codeable_Concept)
                + coding (array, fixed-type)
                    + (Coding)
                        + code: `episode_of_care` (string)
            + value: `d5a5d991-0bf7-476f-b3cf-bec73f044b2e` (string, required)
+ `granted_to` (Reference, required) - type and identifier of entity to whom access has been granted (employee or legal_entity)
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ expires_at: 1498749591 (number, required) - expiration date-time timestamp
+ reason (Reference, optional) - type and identifier of entity based on which approval has been created
    + identifier (Identifier)
        + type (Codeable_Concept)
            + coding (array, fixed-type)
                + (Coding)
                    + code: `employee` (string)
+ `status`: new (enum, required) - status of approval
    - new
    - active
+ access_level: `read` (string, required) - only `read` is supported
+ `authentication_method_current` (object, required)
    + type: `OTP` (enum, required)
        - OTP
        - OFFLINE
        - NA
    + number: `+38093*****85` (string, optional)
